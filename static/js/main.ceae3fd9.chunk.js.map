{"version":3,"sources":["PathFindingVisualizer/mazeAlgorithms/recursizeDivision.js","PathFindingVisualizer/mazeAlgorithms/verticalMaze.js","PathFindingVisualizer/mazeAlgorithms/horizontalMaze.js","PathFindingVisualizer/node/node.jsx","PathFindingVisualizer/algorithm/dijkstra.js","PathFindingVisualizer/algorithm/astar.js","PathFindingVisualizer/algorithm/breadthFirstSearch.js","PathFindingVisualizer/algorithm/depthFirstSearch.js","PathFindingVisualizer/algorithm/greedyBestFirstSearch.js","PathFindingVisualizer/algorithm/bidirectionalGreedySearch.js","PathFindingVisualizer/PathFindingVisualizer.jsx","PathFindingVisualizer/mazeAlgorithms/randomMaze.js","Screens/PathFindingVisualizerScreen.js","SortingVisualizer/SortingAnimations/bubbleSortAnimation.js","SortingVisualizer/SortingAlgorithms/bubbleSort.js","SortingVisualizer/SortingAlgorithms/quickSort.js","SortingVisualizer/SortingAnimations/quickSortAnimation.js","SortingVisualizer/SortingAnimations/selectionSortAnimation.js","SortingVisualizer/SortingAlgorithms/selectionSort.js","SortingVisualizer/SortingAnimations/insertionSortAnimation.js","SortingVisualizer/SortingAlgorithms/insertionSort.js","SortingVisualizer/SortingAlgorithms/mergeSort.js","SortingVisualizer/SortingAnimations/mergeSortAnimation.js","SortingVisualizer/components/bubbleSortComponent.jsx","SortingVisualizer/components/mergeSortComponent.jsx","SortingVisualizer/SortingVisualizer.js","navbar/navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["walls","Node","props","cellHeight","row","col","isStart","isFinish","isWall","isVisited","isShortest","width","height","numRows","numColumns","onDragStart","onDragOver","onDrop","extraClass","isPlace","cellWidth","Math","floor","id","draggable","event","className","style","e","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","getNeighbours","neighbourNotInUnvisitedNodes","manhattenDistance","abs","isNeighbour","closestNodeStart","closestNodeFinish","rowStart","colStart","rowFinish","colFinish","nodeA","nodeB","recursiveDivisionMaze","vertical","range","horizontal","getRecursiveWalls","len","result","i","dir","num","generateOddRandomNumber","addWall","slice","indexOf","array","max","randomNum","random","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","choice","getVerticalWalls","horizontalMaze","getHorizontalWalls","initialNum","getInitialNum","window","innerWidth","innerHeight","initialNumRows","initialNumColumns","startFinishNode","randomNums","x","y","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","getRandomNums","getStartFinishNode","getNewGridWithMaze","newGrid","newNode","getVisitedNodesInOrder","visitedNodesInOrderStart","visitedNodesInOrderFinish","n","undefined","randomNums1","randomNums2","PathFindingVisualizer","useState","setGrid","setWidth","setHeight","speed","visualizingAlgorithm","setVisualizingAlgorithm","generatingMaze","setGeneratingMaze","mazeSpeed","currAlgo","setCurrAlgo","maze","setMaze","dragStartData","setDragStartData","dragEndData","setDragEndData","sNode","setSNode","fNode","setFNode","isTarget","setIsTarget","useEffect","addEventListener","updateDimensions","getInitialGrid","animateShortestPath","nodesInShortestPathOrder","setTimeout","updateNodesForRender","document","getElementById","animateAlgorithm","visualizeAStar","totalDistance","unshift","astar","currentNode","getNodesInShortestPathOrderAstar","visualizeBFS","breadthFirstSearch","getNodesInShortestPathOrderBFS","visualizeDFS","depthFirstSearch","getNodesInShortestPathOrderDFS","visualizeGreedyBFS","greedyBFS","getNodesInShortestPathOrderGreedyBFS","visualizeBidirectionalGreedySearch","unvisitedNodesStart","unvisitedNodesFinish","bidirectionalGreedySearch","isShortedPath","animateBidirectionalAlgorithm","getNodesInShortestPathOrderBidirectionalGreedySearch","clearGrid","animateMaze","generateRandomMaze","randomMaze","currentRow","createNode","onChange","target","value","handleAlgoChange","onClick","getNodesInShortestPathOrderDijkstra","backgroundColor","color","borderColor","padding","console","log","handleMazeChange","type","map","rowId","nodeId","preventDefault","handleDragOver","handleDragStart","handleDrop","PathFindingVisualizerScreen","PRIMARY_COLOR","bubbleSortAnimation","ANIMATION_SPEED_MS","animations","arr","k","j","bubbleSort","arrayBars","getElementsByClassName","child","barIdx","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","quickSort","quickSortHelper","start","end","pIndex","pivot","swap","partition","FINAL_COLOR","quickSortAnimation","isColorChange","element","minIdx","selectionSort","colorOne","colorTwo","barThreeStyle","insertionSortAnimation","key","insertionSort","keyHeight","barStyle","mergeSort","auxillaryArray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","doMerge","mergeSortAnimation","newHeight","allBars","querySelectorAll","BubbleSortComponent","textAlign","fontWeight","marginTop","marginBottom","MergeSortComponent","useStyles","makeStyles","root","position","bottom","label","fontSize","top","SortingVisualizer","classes","setArray","setValue","setANIMATION_SPEED_MS","currentSort","setCurrentSort","getWindowDimensions","_width","_height","randomIntFromInterval","_resetArray","newWidth","resetArray","NO_OF_ARRAY_BAR","min","_bubbleSort","paddingTop","display","Typography","Slider","aria-labelledby","selected","selectionSortAnimation","_value","index","paddingLeft","NavBar","logo","class","href","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ceae3fd9.chunk.js","sourcesContent":["let walls;\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\n  if (vertical.length < 2 || horizontal.length < 2) {\n    return;\n  }\n  let dir;\n  let num;\n  if (vertical.length > horizontal.length) {\n    dir = 0;\n    num = generateOddRandomNumber(vertical);\n  }\n  if (vertical.length <= horizontal.length) {\n    dir = 1;\n    num = generateOddRandomNumber(horizontal);\n  }\n\n  if (dir === 0) {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\n    getRecursiveWalls(\n      vertical.slice(0, vertical.indexOf(num)),\n      horizontal,\n      grid,\n      startNode,\n      finishNode\n    );\n    getRecursiveWalls(\n      vertical.slice(vertical.indexOf(num) + 1),\n      horizontal,\n      grid,\n      startNode,\n      finishNode\n    );\n  } else {\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(0, horizontal.indexOf(num)),\n      grid,\n      startNode,\n      finishNode\n    );\n    getRecursiveWalls(\n      vertical,\n      horizontal.slice(horizontal.indexOf(num) + 1),\n      grid,\n      startNode,\n      finishNode\n    );\n  }\n}\n\nfunction generateOddRandomNumber(array) {\n  let max = array.length - 1;\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 === 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return array[randomNum];\n}\n\n//dir === 0 => Horizontal\n//dir === 1 => Vertical\n\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  if (dir === 0) {\n    if (horizontal.length === 2) return;\n    for (let temp of horizontal) {\n      if (\n        (temp === startNode.row && num === startNode.col) ||\n        (temp === finishNode.row && num === finishNode.col)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([temp, num]);\n    }\n  } else {\n    if (vertical.length === 2) return;\n    for (let temp of vertical) {\n      if (\n        (num === startNode.row && temp === startNode.col) ||\n        (num === finishNode.row && temp === finishNode.col)\n      ) {\n        isStartFinish = true;\n        continue;\n      }\n      tempWalls.push([num, temp]);\n    }\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}\n\nfunction generateRandomNumber(max) {\n  let randomNum =\n    Math.floor(Math.random() * (max / 2)) +\n    Math.floor(Math.random() * (max / 2));\n  if (randomNum % 2 !== 0) {\n    if (randomNum === max) {\n      randomNum -= 1;\n    } else {\n      randomNum += 1;\n    }\n  }\n  return randomNum;\n}","let walls;\nexport function verticalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\n  if (vertical.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of vertical) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, horizontal, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, horizontal, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of horizontal) {\n    if (\n      (temp === startNode.row && num === startNode.col) ||\n      (temp === finishNode.row && num === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([temp, num]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}","let walls;\nexport function horizontalMaze(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  let vertical = range(grid[0].length);\n  let horizontal = range(grid.length);\n  walls = [];\n  getHorizontalWalls(vertical, horizontal, startNode, finishNode);\n  return walls;\n}\n\nfunction range(len) {\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction getHorizontalWalls(vertical, horizontal, startNode, finishNode) {\n  if (horizontal.length < 2) {\n    return;\n  }\n\n  let choice = Math.floor(Math.random() * 2);\n  for (let num of horizontal) {\n    if (choice === 0 && num % 2 !== 0) {\n      addWall(num, vertical, startNode, finishNode);\n    }\n    if (choice === 1 && num % 2 === 0) {\n      addWall(num, vertical, startNode, finishNode);\n    }\n  }\n}\n\nfunction addWall(num, vertical, startNode, finishNode) {\n  let isStartFinish = false;\n  let tempWalls = [];\n  for (let temp of vertical) {\n    if (\n      (num === startNode.row && temp === startNode.col) ||\n      (num === finishNode.row && temp === finishNode.col)\n    ) {\n      isStartFinish = true;\n      continue;\n    }\n    tempWalls.push([num, temp]);\n  }\n  if (!isStartFinish) {\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\n  }\n  for (let wall of tempWalls) {\n    walls.push(wall);\n  }\n}","import React from \"react\";\nimport \"./node.css\";\n\nconst Node = (props) => {\n  const {\n    row,\n    col,\n    isStart,\n    isFinish,\n    isWall,\n    isVisited,\n    isShortest,\n    width,\n    height,\n    numRows,\n    numColumns,\n    onDragStart,\n    onDragOver,\n    onDrop\n  } = props;\n\n  const extraClass = isStart\n    ? \"node node-start\"\n    : isFinish\n    ? \"node node-finish\"\n    : isWall\n    ? \"node-wall\"\n    : isShortest\n    ? \"node node-shortest-path\"\n    : isVisited\n    ? \"node node-visited\"\n    : \"node\";\n\n\n\n    const isPlace = isStart || isFinish;\n  const block = () => {\n    if (isPlace) {\n      return (\n        <div\n          id={`node-${row}-${col}`}\n          draggable\n          onDragStart={(event)=>onDragStart(event)}\n          className={`${extraClass}`}\n          style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\n        ></div>\n      );\n    } else {\n      return (\n        <div\n          id={`node-${row}-${col}`}\n          onDragOver={(e)=>onDragOver(e)}\n          onDrop={()=>onDrop()}\n          className={`node ${extraClass}`}\n          style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\n          \n        ></div>\n      )\n    }\n  }\n\n\n    let cellWidth = Math.floor((width - 15) / numColumns);\n    let cellHeight;\n    if (width > 1500) {\n      cellHeight = Math.floor((height - 70) / numRows);\n    } else if (width > 1000) {\n      cellHeight = Math.floor((height - 70) / numRows);\n    } else if (width > 500) {\n      cellHeight = Math.floor((height - 60) / numRows);\n    } else if (width > 0) {\n      cellHeight = Math.floor((height - 50) / numRows);\n    }\n\n    return (\n        <>\n        {block()}\n        </>\n         \n       \n      );\n};\n\nexport default Node;\n","export function dijkstra(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    startNode.distance = 0;\n    let unvisitedNodes = getNodes(grid);\n    let visitedNodesInOrder = [];\n    while (unvisitedNodes.length !== 0) {\n      unvisitedNodes.sort((a, b) => a.distance - b.distance);\n      let closestNode = unvisitedNodes.shift();\n      if (closestNode.isWall) continue;\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      updateUnvisitedNeighbours(closestNode, grid);\n    }\n  }\n  \n  function getNodes(grid) {\n    let nodes = [];\n    for (let row of grid) {\n      for (let node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  function updateUnvisitedNeighbours(node, grid) {\n    let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\n      unvisitedNeighbour.distance = node.distance + 1;\n      unvisitedNeighbour.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbours(node, grid) {\n    let neighbours = [];\n    let { row, col } = node;\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    return neighbours\n      .filter((neighbour) => !neighbour.isWall)\n      .filter((neighbour) => !neighbour.isVisited);\n  }\n  \n  export function getNodesInShortestPathOrderDijkstra(finishNode) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }\n  ","export function astar(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    let unvisitedNodes = []; //open list\n    let visitedNodesInOrder = []; //closed list\n    startNode.distance = 0;\n    unvisitedNodes.push(startNode);\n  \n    while (unvisitedNodes.length !== 0) {\n      unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\n      let closestNode = unvisitedNodes.shift();\n      if (closestNode === finishNode) return visitedNodesInOrder;\n  \n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n  \n      let neighbours = getNeighbours(closestNode, grid);\n      for (let neighbour of neighbours) {\n        let distance = closestNode.distance + 1;\n        //f(n) = g(n) + h(n)\n        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n          unvisitedNodes.unshift(neighbour);\n          neighbour.distance = distance;\n          neighbour.totalDistance =\n            distance + manhattenDistance(neighbour, finishNode);\n          neighbour.previousNode = closestNode;\n        } else if (distance < neighbour.distance) {\n          neighbour.distance = distance;\n          neighbour.totalDistance =\n            distance + manhattenDistance(neighbour, finishNode);\n          neighbour.previousNode = closestNode;\n        }\n      }\n    }\n    return visitedNodesInOrder;\n  }\n  \n  function getNeighbours(node, grid) {\n    let neighbours = [];\n    let { row, col } = node;\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    return neighbours.filter(\n      (neighbour) => !neighbour.isWall && !neighbour.isVisited\n    );\n  }\n  \n  function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n    for (let node of unvisitedNodes) {\n      if (node.row === neighbour.row && node.col === neighbour.col) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  function manhattenDistance(node, finishNode) {\n    let x = Math.abs(node.row - finishNode.row);\n    let y = Math.abs(node.col - finishNode.col);\n    return x + y;\n  }\n  \n  export function getNodesInShortestPathOrderAstar(finishNode) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }\n  ","export function breadthFirstSearch(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    let unvisitedNodes = [];\n    let visitedNodesInOrder = [];\n    unvisitedNodes.push(startNode);\n    while (unvisitedNodes.length !== 0) {\n      let closestNode = unvisitedNodes.shift();\n      if (closestNode.isWall) continue;\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      visitedNodesInOrder.push(closestNode);\n      closestNode.isVisited = true;\n      let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n      for (let unvisitedNeighbour of unvisitedNeighbours) {\n        unvisitedNeighbour.previousNode = closestNode;\n        if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\n          unvisitedNodes.push(unvisitedNeighbour);\n        }\n      }\n    }\n    return visitedNodesInOrder;\n  }\n  \n  function getUnvisitedNeighbours(node, grid) {\n    let neighbours = [];\n    let { row, col } = node;\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    return neighbours.filter((neighbour) => !neighbour.isVisited);\n  }\n  \n  function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n    for (let node of unvisitedNodes) {\n      if (node.row === neighbour.row && node.col === neighbour.col) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  export function getNodesInShortestPathOrderBFS(finishNode) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }\n  ","export function depthFirstSearch(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    let unvisitedNodes = [];\n    let visitedNodesInOrder = [];\n    unvisitedNodes.push(startNode);\n    while (unvisitedNodes.length !== 0) {\n      let closestNode = unvisitedNodes.shift();\n      if (closestNode.isWall) continue;\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      visitedNodesInOrder.push(closestNode);\n      closestNode.isVisited = true;\n      let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\n      for (let unvisitedNeighbour of unvisitedNeighbours) {\n        unvisitedNeighbour.previousNode = closestNode;\n        unvisitedNodes.unshift(unvisitedNeighbour);\n      }\n    }\n    return visitedNodesInOrder;\n  }\n  \n  function getUnvisitedNeighbours(node, grid) {\n    let neighbours = [];\n    let { row, col } = node;\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    return neighbours.filter((neighbour) => !neighbour.isVisited);\n  }\n  \n  export function getNodesInShortestPathOrderDFS(finishNode) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }","export function greedyBFS(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    let unvisitedNodes = []; //open list\n    let visitedNodesInOrder = []; //closed list\n    startNode.distance = 0;\n    unvisitedNodes.push(startNode);\n  \n    while (unvisitedNodes.length !== 0) {\n      unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\n      let closestNode = unvisitedNodes.shift();\n      if (closestNode === finishNode) return visitedNodesInOrder;\n  \n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n  \n      let neighbours = getNeighbours(closestNode, grid);\n      for (let neighbour of neighbours) {\n        let distance = closestNode.distance + 1;\n        //f(n) = h(n)\n        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\n          unvisitedNodes.unshift(neighbour);\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n          neighbour.previousNode = closestNode;\n        } else if (distance < neighbour.distance) {\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n          neighbour.previousNode = closestNode;\n        }\n      }\n    }\n    return visitedNodesInOrder;\n  }\n  \n  function getNeighbours(node, grid) {\n    let neighbours = [];\n    let { row, col } = node;\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    return neighbours.filter(\n      (neighbour) => !neighbour.isWall && !neighbour.isVisited\n    );\n  }\n  \n  function manhattenDistance(node, finishNode) {\n    let x = Math.abs(node.row - finishNode.row);\n    let y = Math.abs(node.col - finishNode.col);\n    return x + y;\n  }\n  \n  function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n    for (let node of unvisitedNodes) {\n      if (node.row === neighbour.row && node.col === neighbour.col) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  export function getNodesInShortestPathOrderGreedyBFS(finishNode) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }","export function bidirectionalGreedySearch(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    let unvisitedNodesStart = [];\n    let visitedNodesInOrderStart = [];\n    let unvisitedNodesFinish = [];\n    let visitedNodesInOrderFinish = [];\n    startNode.distance = 0;\n    finishNode.distance = 0;\n    unvisitedNodesStart.push(startNode);\n    unvisitedNodesFinish.push(finishNode);\n  \n    while (\n      unvisitedNodesStart.length !== 0 &&\n      unvisitedNodesFinish.length !== 0\n    ) {\n      unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\n      unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\n      let closestNodeStart = unvisitedNodesStart.shift();\n      let closestNodeFinish = unvisitedNodesFinish.shift();\n  \n      closestNodeStart.isVisited = true;\n      closestNodeFinish.isVisited = true;\n      visitedNodesInOrderStart.push(closestNodeStart);\n      visitedNodesInOrderFinish.push(closestNodeFinish);\n      if (isNeighbour(closestNodeStart, closestNodeFinish)) {\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n      }\n  \n      //Start side search\n      let neighbours = getNeighbours(closestNodeStart, grid);\n      for (let neighbour of neighbours) {\n        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n          visitedNodesInOrderStart.push(closestNodeStart);\n          visitedNodesInOrderFinish.push(neighbour);\n          return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n        }\n        let distance = closestNodeStart.distance + 1;\n        //f(n) = h(n)\n        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n          unvisitedNodesStart.unshift(neighbour);\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n          neighbour.previousNode = closestNodeStart;\n        } else if (distance < neighbour.distance) {\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\n          neighbour.previousNode = closestNodeStart;\n        }\n      }\n  \n      //Finish side search\n      neighbours = getNeighbours(closestNodeFinish, grid);\n      for (let neighbour of neighbours) {\n        if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\n          visitedNodesInOrderStart.push(closestNodeFinish);\n          visitedNodesInOrderStart.push(neighbour);\n          return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\n        }\n        let distance = closestNodeFinish.distance + 1;\n        //f(n) = h(n)\n        if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\n          unvisitedNodesFinish.unshift(neighbour);\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n          neighbour.previousNode = closestNodeFinish;\n        } else if (distance < neighbour.distance) {\n          neighbour.distance = distance;\n          neighbour.totalDistance = manhattenDistance(neighbour, startNode);\n          neighbour.previousNode = closestNodeFinish;\n        }\n      }\n    }\n    return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\n  }\n  \n  function isNeighbour(closestNodeStart, closestNodeFinish) {\n    let rowStart = closestNodeStart.row;\n    let colStart = closestNodeStart.col;\n    let rowFinish = closestNodeFinish.row;\n    let colFinish = closestNodeFinish.col;\n    if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\n    if (rowFinish === rowStart && colFinish === colStart + 1) return true;\n    if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\n    if (rowFinish === rowStart && colFinish === colStart - 1) return true;\n    return false;\n  }\n  \n  function getNeighbours(node, grid) {\n    let neighbours = [];\n    let { row, col } = node;\n    if (row !== 0) neighbours.push(grid[row - 1][col]);\n    if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n    if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\n    if (col !== 0) neighbours.push(grid[row][col - 1]);\n    return neighbours.filter(\n      (neighbour) => !neighbour.isWall && !neighbour.isVisited\n    );\n  }\n  \n  function manhattenDistance(nodeA, nodeB) {\n    let x = Math.abs(nodeA.row - nodeB.row);\n    let y = Math.abs(nodeA.col - nodeB.col);\n    return x + y;\n  }\n  \n  function neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\n    for (let node of unvisitedNodes) {\n      if (node.row === neighbour.row && node.col === neighbour.col) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  export function getNodesInShortestPathOrderBidirectionalGreedySearch(\n    nodeA,\n    nodeB\n  ) {\n    let nodesInShortestPathOrder = [];\n    let currentNode = nodeB;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.push(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    currentNode = nodeA;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }","import React, { useState, useEffect } from \"react\";\nimport Node from \"./node/node\";\nimport \"./PathFindingVisualizer.css\";\nimport {\n  dijkstra,\n  getNodesInShortestPathOrderDijkstra,\n} from \"./algorithm/dijkstra\";\nimport { astar, getNodesInShortestPathOrderAstar } from \"./algorithm/astar\";\nimport {\n  breadthFirstSearch,\n  getNodesInShortestPathOrderBFS,\n} from \"./algorithm/breadthFirstSearch\";\n\nimport {\n  depthFirstSearch,\n  getNodesInShortestPathOrderDFS,\n} from \"./algorithm/depthFirstSearch\";\nimport {\n  greedyBFS,\n  getNodesInShortestPathOrderGreedyBFS,\n} from \"./algorithm/greedyBestFirstSearch\";\nimport {\n  bidirectionalGreedySearch,\n  getNodesInShortestPathOrderBidirectionalGreedySearch,\n} from \"./algorithm/bidirectionalGreedySearch\";\n\nimport { randomMaze } from \"./mazeAlgorithms/randomMaze\";\nimport { recursiveDivisionMaze } from \"./mazeAlgorithms/recursizeDivision\";\nimport { verticalMaze } from \"./mazeAlgorithms/verticalMaze\";\nimport { horizontalMaze } from \"./mazeAlgorithms/horizontalMaze\";\n\nconst initialNum = getInitialNum(window.innerWidth-100, window.innerHeight-100);\nconst initialNumRows = initialNum[0];\nconst initialNumColumns = initialNum[1];\n\nconst startFinishNode = getStartFinishNode(initialNumRows, initialNumColumns);\nconst startNodeRow = startFinishNode[0];\nconst startNodeCol = startFinishNode[1];\nconst finishNodeRow = startFinishNode[2];\nconst finishNodeCol = startFinishNode[3];\n\nconst PathFindingVisualizer = () => {\n  const [grid, setGrid] = useState([]);\n  const [width, setWidth] = useState(window.innerWidth);\n  const [height, setHeight] = useState(window.innerHeight);\n  const [speed, ] = useState(10);\n  const [visualizingAlgorithm, setVisualizingAlgorithm] = useState(false);\n  const [generatingMaze, setGeneratingMaze] = useState(false);\n  const [mazeSpeed, ] = useState(10);\n  const [numRows, ] = useState(initialNumRows);\n  const [numColumns, ] = useState(initialNumColumns);\n  const [currAlgo, setCurrAlgo] = useState(\"A* algorithm\");\n  const [maze, setMaze] = useState(\"Random Maze\");\n  const [dragStartData, setDragStartData] = useState([startNodeRow, startNodeCol]);\n  const [dragEndData, setDragEndData] = useState([finishNodeRow,finishNodeCol])\n  const [sNode,setSNode] = useState([startNodeRow,startNodeCol]);\n  const [fNode,setFNode] = useState([finishNodeRow,finishNodeCol])\n  const [isTarget,setIsTarget]  = useState(false)\n\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateDimensions());\n    // eslint-disable-next-line\n    const newGrid = getInitialGrid(numRows, numColumns);// eslint-disable-next-line\n    setGrid(newGrid);\n  }, []);\n\n  const updateDimensions = () => {\n    setHeight(window.innerHeight);\n    setWidth(window.innerWidth);\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n  };\n  const handleDragStart = (event, row, col) => {\n    if(row === sNode[0] && col === sNode[1]){\n      setDragStartData([row, col]);\n    }\n    else{\n      setIsTarget(true)\n      setDragEndData([row,col]);\n    }\n  };\n\n  const handleDrop = (row, col) => {\n    const newGrid = grid;\n    const temp = newGrid[row][col];\n    if(isTarget){\n      setFNode([row,col])\n      document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\n      document.getElementById(`node-${dragEndData[0]}-${dragEndData[1]}`).className =\n        \"node\";\n        temp.isFinish = true;\n    }\n    else{\n      setSNode([row,col]);\n    document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\n    document.getElementById(`node-${dragStartData[0]}-${dragStartData[1]}`).className =\n      \"node\";\n      temp.isStart = true;\n\n    }\n    \n    setIsTarget(false);\n    newGrid[row][col] = temp;\n    setGrid(newGrid);\n  };\n\n  const animateShortestPath = (\n    nodesInShortestPathOrder,\n    visitedNodesInOrder\n  ) => {\n    if (nodesInShortestPathOrder.length === 1) {\n      setVisualizingAlgorithm(false);\n    }\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\n      if (i === nodesInShortestPathOrder.length - 1) {\n        setTimeout(() => {\n          let newGrid = updateNodesForRender(\n            grid,\n            nodesInShortestPathOrder,\n            visitedNodesInOrder\n          );\n          setGrid(newGrid);\n          setVisualizingAlgorithm(false);\n        }, i * (3 * speed));\n        return;\n      }\n      let node = nodesInShortestPathOrder[i];\n      setTimeout(() => {\n        //shortest path node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, i * (3 * speed));\n    }\n  };\n\n  const animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    let newGrid = grid;\n    for (let row of newGrid) {\n      for (let node of row) {\n        let newNode = {\n          ...node,\n          isVisited: false,\n        };\n        newGrid[node.row][node.col] = newNode;\n      }\n    }\n    setGrid(newGrid);\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      let node = visitedNodesInOrder[i];\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n        }, i * speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited node\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, i * speed);\n    }\n  };\n\n  function animateBidirectionalAlgorithm(\n    visitedNodesInOrderStart,\n    visitedNodesInOrderFinish,\n    nodesInShortestPathOrder,\n    isShortedPath\n  ) {\n    let len = Math.max(\n      visitedNodesInOrderStart.length,\n      visitedNodesInOrderFinish.length\n    );\n    for (let i = 1; i <= len; i++) {\n      let nodeA = visitedNodesInOrderStart[i];\n      let nodeB = visitedNodesInOrderFinish[i];\n      if (i === visitedNodesInOrderStart.length) {\n        setTimeout(() => {\n          let visitedNodesInOrder = getVisitedNodesInOrder(\n            visitedNodesInOrderStart,\n            visitedNodesInOrderFinish\n          );\n          if (isShortedPath) {\n            animateShortestPath(nodesInShortestPathOrder, visitedNodesInOrder);\n          } else {\n            setVisualizingAlgorithm(true);\n          }\n        }, i * speed);\n        return;\n      }\n      setTimeout(() => {\n        //visited nodes\n        if (nodeA !== undefined)\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\n            \"node node-visited\";\n        if (nodeB !== undefined)\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\n            \"node node-visited\";\n      }, i * speed);\n    }\n  }\n\n  function visualizeDijkstra() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setVisualizingAlgorithm(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder =\n        getNodesInShortestPathOrderDijkstra(finishNode);\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, speed);\n  }\n\n  const updateNodesForRender = (\n    grid,\n    nodesInShortestPathOrder,\n    visitedNodesInOrder\n  ) => {\n    let newGrid = grid.slice();\n    for (let node of visitedNodesInOrder) {\n      if (\n        (node.row === sNode[0] && node.col === sNode[1]) ||\n        (node.row === fNode[0] && node.col === fNode[1])\n      )\n        continue;\n      let newNode = {\n        ...node,\n        isVisited: true,\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n    for (let node of nodesInShortestPathOrder) {\n      if (node.row === fNode[0] && node.col === fNode[1]) {\n        return newGrid;\n      }\n      let newNode = {\n        ...node,\n        isVisited: false,\n        isShortest: true,\n      };\n      newGrid[node.row][node.col] = newNode;\n    }\n  };\n\n  function visualizeAStar() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setVisualizingAlgorithm(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\n      const nodesInShortestPathOrder =\n        getNodesInShortestPathOrderAstar(finishNode);\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, speed);\n  }\n\n  function visualizeBFS() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setVisualizingAlgorithm(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const visitedNodesInOrder = breadthFirstSearch(\n        grid,\n        startNode,\n        finishNode\n      );\n      const nodesInShortestPathOrder =\n        getNodesInShortestPathOrderBFS(finishNode);\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, speed);\n  }\n\n  function visualizeDFS() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setVisualizingAlgorithm(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\n      const nodesInShortestPathOrder =\n        getNodesInShortestPathOrderDFS(finishNode);\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, speed);\n  }\n\n  function visualizeGreedyBFS() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setVisualizingAlgorithm(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\n      const nodesInShortestPathOrder =\n        getNodesInShortestPathOrderGreedyBFS(finishNode);\n      animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n    }, speed);\n  }\n\n  function visualizeBidirectionalGreedySearch() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setVisualizingAlgorithm(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const visitedNodesInOrder = bidirectionalGreedySearch(\n        grid,\n        startNode,\n        finishNode\n      );\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\n      const isShortedPath = visitedNodesInOrder[2];\n      const nodesInShortestPathOrder =\n        getNodesInShortestPathOrderBidirectionalGreedySearch(\n          visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\n          visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\n        );\n      animateBidirectionalAlgorithm(\n        visitedNodesInOrderStart,\n        visitedNodesInOrderFinish,\n        nodesInShortestPathOrder,\n        isShortedPath\n      );\n    }, speed);\n  }\n\n  function clearGrid() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[0].length; col++) {\n        if (\n          !(\n            (row === sNode[0] && col === sNode[1]) ||\n            (row === fNode[0] && col === fNode[1])\n          )\n        ) {\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\n        }\n      }\n    }\n    const newGrid = getInitialGrid(numRows, numColumns);\n    setVisualizingAlgorithm(false);\n    setGeneratingMaze(false);\n    setGrid(newGrid);\n  }\n\n  const animateMaze = (walls) => {\n    for (let i = 0; i <= walls.length; i++) {\n      if (i === walls.length) {\n        setTimeout(() => {\n          clearGrid();\n          let newGrid = getNewGridWithMaze(grid, walls);\n          setGrid(newGrid);\n          setGeneratingMaze(false);\n        }, i * mazeSpeed);\n        return;\n      }\n      let wall = walls[i];\n      let node = grid[wall[0]][wall[1]];\n      setTimeout(() => {\n        //Walls\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-wall-animated\";\n      }, i * mazeSpeed);\n    }\n  };\n\n  function generateRandomMaze() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setGeneratingMaze(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const walls = randomMaze(grid, startNode, finishNode);\n      animateMaze(walls);\n    }, mazeSpeed);\n  }\n\n  function generateRecursiveDivisionMaze() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setGeneratingMaze(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\n      animateMaze(walls);\n    }, mazeSpeed);\n  }\n\n  function generateVerticalMaze() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setGeneratingMaze(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const walls = verticalMaze(grid, startNode, finishNode);\n      animateMaze(walls);\n    }, mazeSpeed);\n  }\n\n  function generateHorizontalMaze() {\n    if (visualizingAlgorithm || generatingMaze) {\n      return;\n    }\n    setGeneratingMaze(true);\n    setTimeout(() => {\n      const startNode = grid[sNode[0]][sNode[1]];\n      const finishNode = grid[fNode[0]][fNode[1]];\n      const walls = horizontalMaze(grid, startNode, finishNode);\n      animateMaze(walls);\n    }, mazeSpeed);\n  }\n\n  const handleAlgoChange = (event) => {\n    setCurrAlgo(event.target.value);\n  };\n\n  const handleMazeChange = (event) => {\n    setMaze(event.target.value);\n    console.log(event.target.value);\n  };\n\n  const visualizer = () => {\n    if (currAlgo === \"Dijkstra\") visualizeDijkstra();\n    else if (currAlgo === \"A* algorithm\") visualizeAStar();\n    else if (currAlgo === \"Breadth First Search\") visualizeBFS();\n    else if (currAlgo === \"Depth First Search\") visualizeDFS();\n    else if (currAlgo === \"Greedy BFS\") visualizeGreedyBFS();\n    else if (currAlgo === \"Bidirectional Greedy Search\")\n      visualizeBidirectionalGreedySearch();\n  };\n  const generateMaze = () => {\n    if (maze === \"Random Maze\") generateRandomMaze();\n    else if (maze === \"Recursive Maze\") generateRecursiveDivisionMaze();\n    else if (maze === \"Horizontal Maze\") generateHorizontalMaze();\n    else if (maze === \"Vertical Maze\") generateVerticalMaze();\n  };\n\n\n  const getInitialGrid = (numRows, numColumns) => {\n    let grid = [];\n    for (let row = 0; row < numRows - 3; row++) {\n      let currentRow = [];\n      for (let col = 0; col < numColumns - 5; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n  \n  const createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === sNode[0] && col === sNode[1],\n      isFinish: row === fNode[0] && col === fNode[1],\n      distance: Infinity,\n      totalDistance: Infinity,\n      isVisited: false,\n      isShortest: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"info-container\">\n        <div className=\"box\">\n        <select onChange={(event) => handleAlgoChange(event)}>\n          <option> A* algorithm</option>\n          <option>Dijkstra</option>\n          <option>Greedy BFS</option>\n          <option>Bidirectional Greedy Search</option>\n          <hr />\n          <option>Depth First Search</option>\n          <option>Breadth First Search</option>\n        </select>\n        </div>\n        <button onClick={visualizer} style={{ backgroundColor : \"#008000\",color : \"white\", borderColor : \"#008000\", padding : 8}}>\n          VISUALIZER\n        </button>\n        <button onClick={clearGrid} style={{ backgroundColor : \"red\",color : \"white\", borderColor : \"red\",padding : 8, width: 200 }}>\n          CLEAR\n        </button>\n        <div className=\"box\">\n        <select onChange={(event) => handleMazeChange(event)} >\n          <option>Random Maze</option>\n          <option>Recursive Maze</option>\n          <option>Vertical Maze</option>\n          <option>Horizontal Maze</option>\n        </select>\n        </div>\n        <button\n          type=\"button\"\n          style={{ backgroundColor : \"#008000\",color : \"white\",borderColor : \"#008000\", padding : 8, width : 200}}\n          onClick={generateMaze}\n        >\n          GENERATE MAZE\n        </button>\n      </div>\n      <div\n        className={\n          visualizingAlgorithm || generatingMaze ? \"grid-visualizing\" : \"grid\"\n        }>\n        {grid.map((row, rowId) => {\n          return (\n            <div key={rowId}>\n              {row.map((node, nodeId) => {\n                const {\n                  row,\n                  col,\n                  isStart,\n                  isFinish,\n                  isVisited,\n                  isShortest,\n                  isWall,\n                } = node;\n                return (\n                  <Node\n                    key={nodeId}\n                    row={row}\n                    col={col}\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    isVisited={isVisited}\n                    isShortest={isShortest}\n                    isWall={isWall}\n                    width={width}\n                    height={height}\n                    numRows={numRows}\n                    numColumns={numColumns}\n                    onDragOver={(e) => handleDragOver(e)}\n                    onDragStart={(event) => handleDragStart(event, row, col)}\n                    onDrop={() => handleDrop(row, col)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialNum(width, height) {\n  let numColumns;\n  if (width > 1500) {\n    numColumns = Math.floor(width / 25);\n  } else if (width > 1250) {\n    numColumns = Math.floor(width / 22.5);\n  } else if (width > 1000) {\n    numColumns = Math.floor(width / 20);\n  } else if (width > 750) {\n    numColumns = Math.floor(width / 17.5);\n  } else if (width > 500) {\n    numColumns = Math.floor(width / 15);\n  } else if (width > 250) {\n    numColumns = Math.floor(width / 12.5);\n  } else if (width > 0) {\n    numColumns = Math.floor(width / 10) - 5;\n  }\n  let cellWidth = Math.floor(width / numColumns);\n  let numRows = Math.floor(height / cellWidth) - 5;\n  return [numRows, numColumns];\n}\n\n\n\nconst getNewGridWithMaze = (grid, walls) => {\n  let newGrid = grid.slice();\n  for (let wall of walls) {\n    let node = grid[wall[0]][wall[1]];\n    let newNode = {\n      ...node,\n      isWall: true,\n    };\n    newGrid[wall[0]][wall[1]] = newNode;\n  }\n  return newGrid;\n};\n\nconst getVisitedNodesInOrder = (\n  visitedNodesInOrderStart,\n  visitedNodesInOrderFinish\n) => {\n  let visitedNodesInOrder = [];\n  let n = Math.max(\n    visitedNodesInOrderStart.length,\n    visitedNodesInOrderFinish.length\n  );\n  for (let i = 0; i < n; i++) {\n    if (visitedNodesInOrderStart[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\n    }\n    if (visitedNodesInOrderFinish[i] !== undefined) {\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\n    }\n  }\n  return visitedNodesInOrder;\n};\n\nfunction getRandomNums(num) {\n  let randomNums1 = [];\n  let temp = 2;\n  for (let i = 5; i < num / 2; i += 2) {\n    randomNums1.push(temp);\n    temp += 2;\n  }\n  let randomNums2 = [];\n  temp = -2;\n  for (let i = num / 2; i < num - 5; i += 2) {\n    randomNums2.push(temp);\n    temp -= 2;\n  }\n  return [randomNums1, randomNums2];\n}\n\nfunction getStartFinishNode(numRows, numColumns) {\n  let randomNums;\n  let x;\n  let y;\n  let startNodeRow;\n  let startNodeCol;\n  let finishNodeRow;\n  let finishNodeCol;\n  if (numRows < numColumns) {\n    randomNums = getRandomNums(numRows);\n    x = Math.floor(numRows / 2);\n    y = Math.floor(numColumns / 4);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startNodeRow =\n      x + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    startNodeCol = y + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    finishNodeRow =\n      x + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n    finishNodeCol =\n      numColumns - y + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n  } else {\n    randomNums = getRandomNums(numColumns);\n    x = Math.floor(numRows / 4);\n    y = Math.floor(numColumns / 2);\n    if (x % 2 !== 0) x -= 1;\n    if (y % 2 !== 0) y += 1;\n    startNodeRow = x + [-6, -4, -2, 0][Math.floor(Math.random() * 4)];\n    startNodeCol =\n      y + randomNums[1][Math.floor(Math.random() * randomNums[1].length)];\n    finishNodeRow = numRows - x + [0, 2, 4, 6][Math.floor(Math.random() * 4)];\n    finishNodeCol =\n      y + randomNums[0][Math.floor(Math.random() * randomNums[0].length)];\n  }\n  return [startNodeRow, startNodeCol, finishNodeRow, finishNodeCol];\n}\n\nexport default PathFindingVisualizer;\n","export function randomMaze(grid, startNode, finishNode) {\n    if (!startNode || !finishNode || startNode === finishNode) {\n      return false;\n    }\n    let walls = [];\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[0].length; col++) {\n        if (\n          (row === startNode.row && col === startNode.col) ||\n          (row === finishNode.row && col === finishNode.col)\n        )\n          continue;\n        if (Math.random() < 0.33) {\n          walls.push([row, col]);\n        }\n      }\n    }\n    walls.sort(() => Math.random() - 0.5);\n    return walls;\n  }\n  ","import React from 'react'\nimport PathFindingVisualizer from \"../PathFindingVisualizer/PathFindingVisualizer\"\n\nconst PathFindingVisualizerScreen = () => {\n    return (\n        <>\n            <PathFindingVisualizer />\n        </>\n    )\n}\n\nexport default PathFindingVisualizerScreen\n","import { bubbleSort } from '../SortingAlgorithms/bubbleSort'\nconst PRIMARY_COLOR = 'turquoise'\nconst SECONDARY_COLOR = 'red'\n\nconst bubbleSortAnimation = (array,ANIMATION_SPEED_MS) =>{\n    const animations = bubbleSort(array)\n        const len = animations.length - 1\n        for(let i = 0; i<len + 1; i++){\n            const arrayBars = document.getElementsByClassName(\"arraybar\")\n            const child = animations[i]\n            const isColorChange = i%3 !== 1\n            if(isColorChange){\n                if(child[0] === 0){\n                const barIdx = animations[i]\n                const barOneIdx = barIdx[1]\n                const barTwoIdx = barIdx[2]\n                const barOneStyle = arrayBars[barOneIdx].style\n                const barTwoStyle = arrayBars[barTwoIdx].style\n                const color =  i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = color\n                    barTwoStyle.backgroundColor = color\n                }, i*ANIMATION_SPEED_MS)\n            }\n            else if(child[0] === 4){\n                const barIdx = animations[i]\n                const barOneIdx = barIdx[1]\n                const barTwoIdx = barIdx[2]\n                const barOneStyle = arrayBars[barOneIdx].style\n                const barTwoStyle = arrayBars[barTwoIdx].style\n                const color =  i % 3 === 0 ? \"yellow\" : PRIMARY_COLOR\n\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = color\n                    barTwoStyle.backgroundColor = color\n                }, i*ANIMATION_SPEED_MS)\n            }\n            else if(child[0] === 2){\n                const barIdx = animations[i]\n                const barOneIdx = barIdx[1]\n                const barTwoIdx = barIdx[2]\n                const barOneStyle = arrayBars[barOneIdx].style\n                const barTwoStyle = arrayBars[barTwoIdx].style\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = PRIMARY_COLOR\n                    barTwoStyle.backgroundColor = \"purple\"\n                }, i*ANIMATION_SPEED_MS)\n            }\n             else if(child[0] === 3){\n                const barIdx = animations[i]\n                const barOneIdx = barIdx[1]\n                const barTwoIdx = barIdx[2]\n                const barOneStyle = arrayBars[barOneIdx].style\n                const barTwoStyle = arrayBars[barTwoIdx].style\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = \"purple\"\n                    barTwoStyle.backgroundColor = \"purple\"\n                }, i*ANIMATION_SPEED_MS)\n            }\n\n\n            }\n            else if(child[0] === 1){\n                setTimeout(() =>{\n                    const [,barOneIdx, barTwoIdx] = animations[i]\n                    const barOneStyle = arrayBars[barOneIdx].style\n                    const barTwoStyle = arrayBars[barTwoIdx].style\n                    let temp = barOneStyle.height\n                    barOneStyle.height = barTwoStyle.height\n                    barTwoStyle.height = temp\n\n                },i*ANIMATION_SPEED_MS)\n            }\n            \n        }\n\n}\n\nexport default bubbleSortAnimation","export  function bubbleSort(arr){\n    const animations = []\n    let x = 1\n    for(let i = 0; i < arr.length -1 ; i++){\n        let k = (arr.length - 2 )- i\n        for(let j = 0; j < arr.length -i-1; j++){\n            //comparing color\n            animations.push([0,j,j+1])\n            \n           \n            \n            if(arr[j] > arr[j+1]){\n                animations.push([-2,j,j+1])\n                animations.push([-2,j,j+1])\n\n                animations.push([4,j,j+1])\n                animations.push([1,j,j+1])\n                x = 0\n\n                \n                const temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n                \n            }\n            else{\n                \n                animations.push([-1,j,j+1])\n            }\n\n            \n            if(i === arr.length - 2 && j === k){\n                animations.push([3,j,j+1])\n            }\n            //final postion \n            else if(j === k){\n                animations.push([2,j,j+1])\n            }\n            else if(x === 0){\n                animations.push([4,j,j+1])\n                x = 1\n            }\n            //comparing uncolor\n            else {\n                animations.push([0,j,j+1])\n            }\n\n        }\n    }\n    return animations;\n}\n\n\n","export function quickSort(array){\n    const animations = []\n    quickSortHelper(array,0,array.length - 1,animations)\n    return animations\n}\n\nexport function quickSortHelper(array,start,end,animations){\n    if(start >= end){\n        animations.push([-1,start,end])\n        animations.push([-1,start,end]) \n        if(end<0) end = 0\n        if(start>array.length - 1) start = array.length-1\n        animations.push([3,start,end])\n\n\n    }\n\n    if(start<end){\n        const pIndex = partition(array,start,end,animations)\n        quickSortHelper(array,start,pIndex-1,animations)\n        quickSortHelper(array,pIndex+1,end,animations)\n    }\n}\n\nfunction partition(array,start,end,animations){\n    let i = start\n\n    for(let j = start; j<=end - 1; j++){\n        const pivot = array[end]\n        animations.push([0,j,end])\n        if(array[j]<=pivot){\n\n            animations.push([])\n            animations.push([0,j,end])\n            \n            swap(array,i,j)\n            animations.push([4,i,j])\n            animations.push([1,i,j])\n            animations.push([4,i,j])\n            i++\n        }\n        else{\n            animations.push([-1,i,j])\n            animations.push([0,j,end])\n        }       \n    }\n    animations.push([4,i,end])\n    animations.push([1,i,end])\n    animations.push([2,i,end])\n\n    swap(array,i,end)\n    return i\n}\n\n\nfunction swap(array, i, j){\n    const temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n}","import { quickSort } from \"../SortingAlgorithms/quickSort\";\n\nconst PRIMARY_COLOR = 'turquoise'\nconst SECONDARY_COLOR = 'red'\nconst COMPARING_COLOR = 'yellow'\nconst FINAL_COLOR = 'purple'\nconst quickSortAnimation = (array,ANIMATION_SPEED_MS) =>{\n        const animations = quickSort(array)        \n        for(let i = 0 ; i < animations.length; i++){\n            const arrayBars = document.getElementsByClassName(\"arraybar\")\n            const isColorChange = i % 3 !== 1;\n            const element = animations[i]\n            if(isColorChange){\n                if(element[0] === 4){\n                    const [,barOneIdx,barTwoIdx] = animations[i]\n                    const barOneStyle = arrayBars[barOneIdx].style\n                    const barTwoStyle = arrayBars[barTwoIdx].style\n                    const color =  i % 3 === 0 ? COMPARING_COLOR : PRIMARY_COLOR\n                    setTimeout(()=>{\n                        barOneStyle.backgroundColor = color\n                        barTwoStyle.backgroundColor = color\n                    }, i*ANIMATION_SPEED_MS)\n                }\n                if(element[0]  === 3){\n                    const [,barOneIdx,barTwoIdx] = animations[i]\n                    const barOneStyle = arrayBars[barOneIdx].style\n                    const barTwoStyle = arrayBars[barTwoIdx].style\n                    setTimeout(()=>{\n                        barOneStyle.backgroundColor = FINAL_COLOR\n                        barTwoStyle.backgroundColor = FINAL_COLOR\n                    }, i*ANIMATION_SPEED_MS)\n                }\n                else if(element[0] === 2){\n                    setTimeout(()=>{\n                        const [,barOneIdx, barTwoIdx] = animations[i]\n                        const barTwoStyle = arrayBars[barTwoIdx].style\n                        const barOneStyle = arrayBars[barOneIdx].style\n                        barOneStyle.backgroundColor = FINAL_COLOR\n                        barTwoStyle.backgroundColor = PRIMARY_COLOR\n                        },i*ANIMATION_SPEED_MS)\n                }\n                else if(element[0] === 0){\n                    const [,barOneIdx,barTwoIdx] = animations[i]\n    \n    \n                    const barOneStyle = arrayBars[barOneIdx].style\n                    const barTwoStyle = arrayBars[barTwoIdx].style\n                    const color =  i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR\n                    setTimeout(()=>{\n                        barOneStyle.backgroundColor = color\n                        barTwoStyle.backgroundColor = color\n                    }, i*ANIMATION_SPEED_MS)\n                }\n               \n                \n            }\n            else if(element[0] === 1){\n                setTimeout(() =>{\n                    const [,barOneIdx, barTwoIdx] = animations[i]\n                    const barOneStyle = arrayBars[barOneIdx].style\n                    const barTwoStyle = arrayBars[barTwoIdx].style\n                    let temp = barOneStyle.height\n                    barOneStyle.height = barTwoStyle.height\n                    barTwoStyle.height = temp\n\n                },i*ANIMATION_SPEED_MS)\n            }\n        }\n    }\n    \nexport default quickSortAnimation","import { selectionSort } from \"../SortingAlgorithms/selectionSort\";\nconst temp = (array,ANIMATION_SPEED_MS) => {\n  const animations = selectionSort(array);\n  // eslint-disable-next-line\n  for (let i=0; i < animations.length; i++) {\n    const arrayBars = document.getElementsByClassName(\"arraybar\");\n    const element = animations[i];\n    const isColorChange = i % 3 !== 1;\n    if (isColorChange) {\n      if (element[0] === 0) {\n        const [, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const colorOne = i % 3 === 0 ? \"red\" : \"green\";\n        const colorTwo = i % 3 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = colorOne;\n          barTwoStyle.backgroundColor = colorTwo;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      \n      else if(element[0] === 3){\n        const [, barOneIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const color = \"yellow\"\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n    }\n\n    else if (element[0] === 2) {\n            const [, barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const colorOne = i % 3 === 0 ? \"yellow\" : \"purple\";\n            const colorTwo = i % 3 === 0 ? \"yellow\" : \"turquoise\"\n            let barThreeStyle;\n            if(i === (animations.length -1)){\n                const barThreeIdx = barTwoIdx + 1\n                barThreeStyle = arrayBars[barThreeIdx].style\n            }\n\n            setTimeout(() => {\n              barOneStyle.backgroundColor = colorOne;\n              barTwoStyle.backgroundColor = colorTwo;\n              if(i === (animations.length -1)) barThreeStyle.backgroundColor = \"purple\"\n            }, i * ANIMATION_SPEED_MS);\n    }\n    else if (element[0] === -1) {\n        const [, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const colorOne = \"green\"\n        const colorTwo = \"turquoise\"\n        setTimeout(() => {\n          barOneStyle.backgroundColor = colorTwo;\n          barTwoStyle.backgroundColor = colorOne;\n        }, i * ANIMATION_SPEED_MS);\n    }\n    else if (element[0] === -2) {\n        const [, barOneIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const colorOne = \"purple\"\n        setTimeout(() => {\n          barOneStyle.backgroundColor = colorOne;\n        }, i * ANIMATION_SPEED_MS);\n    }\n    }\n    else{\n       if(element[0] === 1){\n           const [,barOneIdx,barTwoIdx] = animations[i]\n           const barOneStyle = arrayBars[barOneIdx].style\n           const barTwoStyle = arrayBars[barTwoIdx].style\n           setTimeout(() =>{\n                let temp = barOneStyle.height\n                barOneStyle.height = barTwoStyle.height\n                barTwoStyle.height = temp\n           }, i* ANIMATION_SPEED_MS)\n       }\n        \n    }\n}\n\n};\n\nexport default temp;\n","export function selectionSort(array){\n    let animations = [];\n    console.log(array)\n    let i = 0;\n    for(; i<array.length-1; i++){\n        let minIdx = i;\n        animations.push([3,i])\n        animations.push([])\n        animations.push([])\n        for(let j=i+1;j<array.length; j++){\n            animations.push([0,j,minIdx]);\n            if(array[j]<array[minIdx]){\n                animations.push([4,minIdx,j]);\n                animations.push([-1,minIdx,j]);\n                minIdx = j;\n            }\n            else{\n                animations.push([])\n                animations.push([0,minIdx,j]);\n            }\n        }\n        animations.push([2,i,minIdx]);\n\n\n        let temp = array[i];\n        array[i] = array[minIdx];\n        array[minIdx] = temp;\n        animations.push([1,i,minIdx]);\n        if(i === minIdx){\n            animations.push([-2,i]);\n        }\n        else{\n            animations.push([2,i,minIdx]);\n        }\n    }\n    animations.push([-2,array.length - 1]);\n    return animations;\n}\n\n","import { insertionSort } from \"../SortingAlgorithms/insertionSort\";\n\nconst insertionSortAnimation = (array,ANIMATION_SPEED_MS) => {\n  const animations = insertionSort(array);\n  \n  let keyHeight = 0;// eslint-disable-next-line\n  for (let i = 0; i < animations.length; i++) {\n    const arrayBars = document.getElementsByClassName(\"arraybar\");\n    const element = animations[i];\n    const isColorChange = i % 3 !== 1;\n    if (isColorChange) {\n      if (element[0] === 4) {\n        const [, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"red\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (element[0] === -4) {\n        const [, barOneIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const color = i % 3 === 0 ? \"yellow\" : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (element[0] === -5) {\n        const [, , x] = animations[i];\n        setTimeout(() => {\n          for (let k = 0; k <= x; k++) {\n            const barStyle = arrayBars[k].style;\n            barStyle.backgroundColor = \"purple\";\n          }\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } else {\n      if (element[0] === 3) {\n        const [, barIdx] = animations[i];\n        const barStyle = arrayBars[barIdx].style;\n        setTimeout(() => {\n          keyHeight = barStyle.height;// eslint-disable-next-line\n        }, i * ANIMATION_SPEED_MS);\n      } else if (element[0] === 1) {\n        const [, barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.height = barTwoStyle.height;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (element[0] === -1) {\n        const [, barOneIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.height = keyHeight;// eslint-disable-next-line\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n};\n\nexport default insertionSortAnimation;\n","\nexport function insertionSort(array){\n    let i, key, j;\n    const animations = []\n    for (i = 1; i < array.length; i++)\n    {\n        key = array[i];\n        j = i - 1;\n        animations.push([])\n        animations.push([3,i])\n        animations.push([])\n \n        /* Move elements of array[0..i-1], that are\n        greater than key, to one position ahead\n        of their current position */\n        while (j >= 0 && array[j] > key)\n        {\n            animations.push([4,j+1,j])\n            animations.push([1,j+1,j])\n            array[j + 1] = array[j];\n            animations.push([4,j+1,j])\n            j = j - 1;\n        }\n        animations.push([-4,j+1,i])\n        animations.push([-1,j+1,i])\n        array[j + 1] = key;\n        animations.push([-5,j+1,i])\n\n    }\n    return animations\n}","export function mergeSort(array){\n    const animations = []\n    if(array.length <= 1) return array;\n    const auxillaryArray = []\n    for(let i=0; i<array.length; i++) auxillaryArray.push(array[i])\n    mergeSortHelper(array,0, array.length-1, auxillaryArray,animations)\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxillaryArray,\n    animations\n){\n    if(startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx)/2)\n    mergeSortHelper(auxillaryArray,startIdx,middleIdx,mainArray,animations)\n    mergeSortHelper(auxillaryArray,middleIdx+1,endIdx,mainArray,animations)\n    doMerge(mainArray, startIdx,middleIdx, endIdx,auxillaryArray,animations)\n}\n\nfunction doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxillaryArray,\n    animations\n){\n    let k = startIdx\n    let i = startIdx\n    let j = middleIdx + 1\n    while(i <= middleIdx && j<= endIdx){\n        animations.push([i,j])\n        if(auxillaryArray[i] <= auxillaryArray[j]){\n            animations.push([k,auxillaryArray[i]])\n            animations.push([i,j])\n            mainArray[k++] = auxillaryArray[i++]\n        }else{\n            animations.push([k,auxillaryArray[j]])\n            animations.push([i,j])\n            mainArray[k++] = auxillaryArray[j++]\n        }\n    }\n\n    while( i <= middleIdx){\n        animations.push([i,i])\n        animations.push([k,auxillaryArray[i]])\n        animations.push([i,i])\n\n        mainArray[k++] = auxillaryArray[i++]\n    }\n\n    while(j<= endIdx){\n        animations.push([j,j])\n        animations.push([k, auxillaryArray[j]])\n        animations.push([j,j])\n\n        mainArray[k++] = auxillaryArray[j++]\n    }\n\n}","import { mergeSort } from \"../SortingAlgorithms/mergeSort\";\n\nconst SECONDARY_COLOR = \"red\"\nconst mergeSortAnimation = (array,ANIMATION_SPEED_MS) =>{\n    const animations = mergeSort(array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"arraybar\");\n      const isColorChange = i % 3 !== 1;\n      if (isColorChange) {\n        const barIdx = animations[i];\n        const barOneIdx = barIdx[0];\n        const barTwoIdx = barIdx[1];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : \"turquoise\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      if(i == animations.length - 1){\n        setTimeout(()=>{\n          const allBars = document.querySelectorAll(\".arraybar\");\n        for (let i = 0; i < allBars.length; i++) {\n          const barStyle = allBars[i].style;\n          barStyle.backgroundColor = \"purple\";\n        };  \n        },i*ANIMATION_SPEED_MS)\n        \n      }\n    }\n    //return animations.length*ANIMATION_SPEED_MS;\n    \n}\n\nexport default mergeSortAnimation","import React from \"react\";\n// import \"./component.css\"\nconst BubbleSortComponent = () => {\n  return (\n    <div className=\"main-container\">\n      <div\n        className=\"unsorted\"\n        style={{\n          backgroundColor: \"turquoise\",\n          width: 100,\n          textAlign: \"center\",\n          fontWeight : \"bold\",\n          marginTop : 5,\n          marginBottom : 3,\n        }}\n      >\n        unsorted\n      </div>\n      <div\n        className=\"comparing\"\n        style={{\n          backgroundColor: \"red\",\n          width: 100,\n          textAlign: \"center\",\n          color : \"#ccc\",\n          marginBottom : 3,\n          fontWeight : \"bold\"\n        }}\n      >\n        comparing\n      </div>\n\n     \n    </div>\n  );\n};\n\nexport default BubbleSortComponent;\n","import React from \"react\";\n// import \"./component.css\"\nconst MergeSortComponent = () => {\n  return (\n    <div className=\"main-container\">\n      <div\n        className=\"swaping\"\n        style={{\n          backgroundColor: \"yellow\",\n          width: 100,\n          textAlign: \"center\",\n          marginBottom : 3,\n          marginTop : 5,\n          fontWeight : \"bold\"\n        }}\n      >\n        swaping\n      </div>\n      <div\n        className=\"sorted\"\n        style={{\n          backgroundColor: \"purple\",\n          width: 100,\n          textAlign: \"center\",\n          color : \"#ccc\",\n          marginBottom : 3,\n          fontWeight : \"bold\"\n        }}\n      >\n        sorted\n      </div>\n    </div>\n  );\n};\n\nexport default MergeSortComponent;\n","import React, { useState, useEffect } from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"./SortingVisualizer.css\";\nimport bubbleSortAnimation from \"./SortingAnimations/bubbleSortAnimation\";\nimport quickSortAnimation from \"./SortingAnimations/quickSortAnimation\";\nimport selectionSortAnimation from \"./SortingAnimations/selectionSortAnimation\";\nimport insertionSortAnimation from \"./SortingAnimations/insertionSortAnimation\";\nimport mergeSortAnimation from \"./SortingAnimations/mergeSortAnimation\";\nimport BubbleSortComponent from \"./components/bubbleSortComponent\";\nimport MergeSortComponent from \"./components/mergeSortComponent\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 165,\n    position : \"relative\",\n    bottom : 8,\n  },\n  label:{\n    fontSize : 13,\n    position : \"relative\",\n    top : 2,\n    color : \"white\",\n    fontWeight : \"bold\"\n  }\n});\nconst PRIMARY_COLOR = \"turquoise\";\nconst SortingVisualizer = () => {\n  const classes = useStyles();\n  const [array, setArray] = useState([]);\n  const [value, setValue] = useState(30);\n  const [ANIMATION_SPEED_MS, setANIMATION_SPEED_MS] = useState(2);\n  const [currentSort, setCurrentSort] = useState(\"Algorithms\");\n  //const [visualizing,setVisualizig] = useState(false);\n\n  //Run this during first render\n  useEffect(() => {\n    const { _height } = getWindowDimensions();\n\n    const _resetArray = () => {\n      const temp = [];\n    for (let i = 0; i < value; i++) {\n      temp.push(randomIntFromInterval(5, _height - _height / 3.5));\n    }\n    setArray(temp);\n    const allBars = document.querySelectorAll(\".arraybar\");\n    for (let i = 0; i < allBars.length; i++) {\n      const barStyle = allBars[i].style;\n      barStyle.backgroundColor = \"turquoise\";\n    };\n  }\n    _resetArray();\n  }, []);\n\n  //Getting dimensions of window\n  function getWindowDimensions() {\n    const { innerWidth: _width, innerHeight: _height } = window;\n    return {\n      _width,\n      _height,\n    };\n  }\n\n  //Calling getWindowDimensions method(destructering)\n  const { _height, _width } = getWindowDimensions();\n  const newWidth = _width - _width / 8;\n\n  //creating new random array\n  const resetArray = (NO_OF_ARRAY_BAR) => {\n    const temp = [];\n    for (let i = 0; i < NO_OF_ARRAY_BAR; i++) {\n      temp.push(randomIntFromInterval(5, _height - _height / 4));\n    }\n    setArray(temp);\n    const allBars = document.querySelectorAll(\".arraybar\");\n    for (let i = 0; i < allBars.length; i++) {\n      const barStyle = allBars[i].style;\n      barStyle.backgroundColor = \"turquoise\";\n    }\n  };\n\n  //Creating random Integer\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  //BubbleSort animation\n  const _bubbleSort = () => {\n    bubbleSortAnimation(array, ANIMATION_SPEED_MS);\n  };\n\n  //MergeSort Animation\n  const _mergeSort = () => {\n    mergeSortAnimation(array, ANIMATION_SPEED_MS);\n  };\n\n  //QuickSort Animation\n  const _quickSort = () => {\n    quickSortAnimation(array, ANIMATION_SPEED_MS);\n  };\n\n  const _selectionSort = () => {\n\n    selectionSortAnimation(array, ANIMATION_SPEED_MS);\n  };\n  const _insertionSort = () => {\n    insertionSortAnimation(array, ANIMATION_SPEED_MS);\n  };\n  const handleChange = (event, value) => {\n    setValue(value);\n    resetArray(value);\n  };\n  const handleChangeSpeed = (event, value) => {\n    setANIMATION_SPEED_MS(event.target.value);\n  };\n  const handleChangeCurrentSort = (event) => {\n    setCurrentSort(event.target.value);\n  };\n  const visualizeAlgorithm = () => {\n    switch (currentSort) {\n      case \"bubbleSort\":\n        _bubbleSort();\n        break;\n      case \"insertionSort\":\n        _insertionSort();\n        break;\n      case \"quickSort\":\n        _quickSort();\n        break;\n      case \"mergeSort\":\n        _mergeSort();\n        break;\n      case \"selectionSort\":\n        _selectionSort();\n        break;\n      default:\n        _bubbleSort();\n        break;\n    }\n  };\n\n  return (\n    <div className=\"array-container\">\n      <div className=\"infoBar-container\">\n        <div style={{ paddingTop : 10}}>\n          <div className=\"box\" style={{ display : \"inline\",position: \"relative\", bottom : 10}}>\n          <select onChange={handleChangeSpeed}>\n            <option value=\"2\">TOO FAST</option>\n            <option value=\"20\">FAST</option>\n            <option value=\"100\">SLOW</option>\n            <option value=\"2000\">TOO SLOW</option>\n          </select>\n          </div>\n        </div>\n        <div className=\"slider-container\">\n        {/* <Typography className={classes.label} gutterBottom>\n              SPEED\n          </Typography>          \n          <Slider\n            className={classes.root}\n            value={ANIMATION_SPEED_MS}\n            min={2}\n            max={230}\n            onChange={handleChangeSpeed}\n            aria-labelledby=\"continuous-slider\"\n          /> */}\n\n          <Typography className={classes.label}>\n            BARS\n          </Typography>\n          <Slider\n            className={classes.root}\n            value={value}\n            min={10}\n            max={newWidth / 5 - 20}\n            onChange={handleChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n        <div className=\"button-container\">\n          {/* Button 3 */}\n          <button  style={{backgroundColor : \"#228b22\", color : \"whitesmoke\", borderColor : \"#228b22\",width : 150}} onClick={() => resetArray(value)}>Generate new Array</button>\n            <div className=\"box\" style={{ display : \"inline\",position: \"relative\", bottom : 10}}>\n          <select onChange={handleChangeCurrentSort} >\n            <option selected value=\"bubbleSort\">\n              Bubble Sort\n            </option>\n            <option value=\"insertionSort\">Insertion Sort</option>\n            <option value=\"quickSort\">Quick Sort</option>\n            <option value=\"mergeSort\">Merge Sort</option>\n            <option value=\"selectionSort\">SelectionSort</option>\n          </select>\n          </div>\n          <button  style={{backgroundColor : \"#228b22\", color : \"whitesmoke\", borderColor : \"#228b22\",width : 150}} onClick={visualizeAlgorithm}>Visuaize Algorithm</button>\n        </div>\n        <div className=\"grap-container\">{/* Graph or Index */}\n        <div>\n        <BubbleSortComponent />\n        </div>\n       \n        </div>\n        <div className=\"temp\">\n        <MergeSortComponent />\n        </div>\n      </div>\n\n      {/* Array Bars */}\n      <div className=\"arraybar-container\">\n        {array.map((_value, index) => (\n          <div\n            className=\"arraybar\"\n            key={index}\n            style={{\n              height: `${_value}px`,\n              width: newWidth / value - 2,\n              paddingLeft: 0,\n              backgroundColor: PRIMARY_COLOR,\n            }}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport \"./navbar.css\"\n\nconst NavBar = () => {\n  const logo =\n    window.innerWidth > 600 ? \"Algorithm Visualizer\" : \"AlgoVisualizer\";\n\n  return (\n    <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n      <a className=\"navbar-brand h1 mb-0\">{logo}</a>\n      {/*  <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarSupportedContent\"\n        aria-controls=\"navbarSupportedContent\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\" \n        \n        >\n        <span class=\"navbar-toggler-icon\"></span> \n      </button> */}\n\n      <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul class=\"navbar-nav mr-auto\" >\n          <li class=\"nav-item active\">\n            <a class=\"nav-link\" href=\"/\"> Sorting\n              {/* Home <span class=\"sr-only\">(current)</span> */}\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"/pathFinding\">\n              PathFinding\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PathFindingVisualizerScreen from \"./Screens/PathFindingVisualizerScreen\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport NavBar from \"./navbar/navbar.jsx\";\n\nfunction App() {\n  return (\n    <Router>\n      <NavBar />\n      <Switch>\n      <Route exact path=\"/\" component={SortingVisualizer} />\n        <Route exact path=\"/pathFinding\" component={PathFindingVisualizerScreen} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}